include:
  - project: nse/ci
    file:
      - /ci/lib/tox-bb5.yml
      - /ci/jobs/build-package.yml
      - /ci/jobs/build-wheels.yml
      - /ci/jobs/publish-package.yml
      - /ci/jobs/docs.yml
      - /ci/jobs/publish-docs.yml
  - project: hpc/gitlab-pipelines
    file: 
      - spack-build-components.gitlab-ci.yml
      - bbp-gitlab-access.yml

workflow:
  rules:
    # Rules taken from official docs to avoid duplicated pipelines
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'


variables:
  bb5_partition: prod_small
  GIT_SUBMODULE_STRATEGY: none


## .PRE STAGE
## ----------

spack_setup:
  stage: .pre
  extends: .spack_setup


flake8:
  stage: .pre
  extends: .tox-template
  variables:
    TOXENV: flake8


## TEST STAGE
## ----------

test-cpp-unit:
  stage: test
  tags:
    - bb5_map
  variables:
    bb5_constraint: cpu
    bb5_ntasks: 4
    bb5_cpus_per_task: 1
    SLURM_OVERLAP: 1
  before_script:
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init --recursive
    - module load unstable cmake gcc boost hpe-mpi
    - cmake -S . -B build
    - cmake --build build -j2
    - cd build && ctest --output-on-failure

test-examples:
  stage: test
  needs: ["flake8"]
  tags:
    - bb5_map
  variables:
    bb5_constraint: cpu
    bb5_ntasks: 5
    bb5_cpus_per_task: 1
    SLURM_OVERLAP: 1
    DATADIR: /gpfs/bbp.cscs.ch/project/proj12/spatial_index/v4
  before_script:
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init --recursive
    # The `py-libsonata` ensures that we get `libsonata>=0.1.16`.
    - module load unstable cmake gcc boost hpe-mpi py-mpi4py
    - python -m venv venv
    - source venv/bin/activate
    - pip install ipython jupyter pytest pytest-mpi
    - pip install -e .
    - bash .ci/run_mpi_pytest.sh
    - bash .ci/_run_examples.sh

test-integration:
  stage: test
  needs: ["flake8"]
  tags:
    - bb5_map
  variables:
    bb5_constraint: cpu
    bb5_ntasks: 5
    bb5_cpus_per_task: 1
    SLURM_OVERLAP: 1
    DATADIR: /gpfs/bbp.cscs.ch/project/proj12/spatial_index/v4
  before_script:
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init --recursive
    # The `py-libsonata` ensures that we get `libsonata>=0.1.16`.
    - module load unstable cmake gcc boost hpe-mpi py-mpi4py py-bluepy py-libsonata
    - python -m venv venv
    - source venv/bin/activate
    - pip install pytest pytest-mpi
    - pip install -e .
    - bash .ci/_run_integration.sh

test-ubuntu:
  stage: test
  needs: ["flake8"]
  tags: [kubernetes]
  image: bbpgitlab.epfl.ch:5050/hpc/spacktainerizer/ubuntu_22.04/builder
  parallel:
    matrix:
      - SI_BOOST_VERSION: ["1.79.0", "1.80.0", "1.81.0"]
  variables:
    KUBERNETES_MEMORY_LIMIT: 5Gi    # memory overrides
    KUBERNETES_MEMORY_REQUEST: 4Gi  # memory overrides
  before_script:
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init --recursive
    - apt install -y python3-dev
    - apt install -y python3-venv
    - apt install -y libopenmpi-dev
    - source ${SPACK_ROOT}/share/spack/setup-env.sh
    - spack install --no-checksum boost@${SI_BOOST_VERSION}+serialization+filesystem
    - spack load boost@${SI_BOOST_VERSION}
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install wheel cmake pytest pytest-mpi
    - pip install -v -e .
    - pytest


test-spack:
  stage: test
  needs: ["spack_setup", "flake8"]
  tags:
    - bb5_map
  variables:
    PIP_PACKAGES: pytest pytest-mpi
  before_script:
    - !reference [.bb5, clean-env]
    - !reference [.define-functions]
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init --recursive
    - source $SPACK_ROOT/share/spack/setup-env.sh
    - module load unstable git py-bluepy
    - spack dev-build spatial-index@develop
    - !reference [.bb5, load-python-310]
    - !reference [.setup-venv]
    - spack load --first spatial-index@develop  # quick fix since spack installation doesn't clean up properly between pipeline runs
    - mv spatial_index _dont_interfere
    - pytest


test-bb5-py310:
  extends: .tox-template
  needs: ["flake8"]
  variables:
    PIP_PACKAGES: 'tox<4'
    TOXENV: py310  # match boost
    TOX_OPTIONS: -vv
    EXTRA_MODULES:
      unstable:gcc
      unstable:boost
      unstable:hpe-mpi
      unstable:py-mpi4py
      unstable:py-bluepy
  script:
    - git submodule update --init --recursive
    - !reference [.tox-template, script]

test-bb5-mpi-compat-hpe:
  extends: test-bb5-py310
  variables:
    TOXENV: mpi-compat

test-bb5-mpi-compat-mvapich2:
  extends: test-bb5-py310
  variables:
    TOXENV: mpi-compat
    EXTRA_MODULES:
      unstable:gcc
      unstable:boost
      unstable:mvapich2
      unstable:py-mpi4py


# Builds package sdist. Dont rename (defined in build-package.yml)
build-package:
  needs: []
  tags: []
  rules:
    - when: always
  before_script:
    - !reference [.define-functions]
    - !reference [.configure-git]
    - git submodule update --init --recursive


# The following lines are a workaround to for this issue:
# https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29370
# Feel free to remove them once the issue is fixed.
  artifacts:
    paths:
      - "${PYTHON_PROJECT_DIR}/dist/*.tar.gz"

# Builds package wheels. Dont rename (defined in build-wheels.yml)
build-wheels:
  needs: []
  tags: [kubernetes]
  image: bbpgitlab.epfl.ch:5050/hpc/spatial-index/manylinux2014_boost_x86_64:boost-179
  variables:
    GIT_SUBMODULE_STRATEGY: none    # Required to avoid cloning test data
    KUBERNETES_MEMORY_LIMIT: 5Gi    # memory overrides
    KUBERNETES_MEMORY_REQUEST: 4Gi  # memory overrides
    TEST_RUN_TOX: "false"  # MVDtool doesnt have wheels
    SI_MPI: "Off"
  parallel:
    matrix:
      - PY_VERSION: [py38, py39, py310]
  before_script:
    # Since we don't need the test-data, we don't
    # need to configure addtional permissions, and can
    # instead just clone the required submodules conveniently
    # located in '3rdparty'.
    - git submodule update --init --recursive 3rdparty
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"'
    - if: $CI_COMMIT_TAG
    - when: manual
      allow_failure: true

test-wheels:
  stage: build
  needs: ["build-wheels"]
  tags: [kubernetes]
  image: bbpgitlab.epfl.ch:5050/hpc/spatial-index/ubuntu_20.04_devel
  variables:
    KUBERNETES_MEMORY_LIMIT: 5Gi    # memory overrides
    KUBERNETES_MEMORY_REQUEST: 4Gi  # memory overrides
    PIP_PACKAGES: pytest pytest-mpi pytest-xdist
  before_script:
    - !reference [.define-functions]
    - !reference [.configure-git]
    - ln -s /usr/bin/python3 /usr/bin/python
    - !reference [.setup-venv]
  script:
    - git submodule update --init --recursive
    - apt-get update
    - pip install wheelhouse/spatial_index-*-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
    - mv spatial_index _dont_interfere
    - pytest -n3

test-sdist:
  stage: build
  needs: ["build-package"]
  tags: [kubernetes]
  image: bbpgitlab.epfl.ch:5050/hpc/spacktainerizer/ubuntu_22.04/builder
  variables:
    KUBERNETES_MEMORY_LIMIT: 5Gi    # memory overrides
    KUBERNETES_MEMORY_REQUEST: 4Gi  # memory overrides
  before_script:
    - !reference [.bbp_gitlab_access, script]
  script:
    - git submodule update --init
    - apt install -y python3-dev python3-venv libopenmpi-dev
    - source ${SPACK_ROOT}/share/spack/setup-env.sh
    - spack install boost@1.79.0+serialization+filesystem
    - spack load boost@1.79.0
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install cmake pytest pytest-mpi pytest-xdist
    - pip install dist/spatial-index-*.tar.gz
    - mv spatial_index _dont_interfere
    - pytest -n3

publish-package:
  tags: []
  rules:
    - if: $CI_COMMIT_TAG
    - when: manual
      allow_failure: true

docs:
  stage: build
  needs: []
  variables:
    PIP_PACKAGES: 'tox<4'
    TOXENV: docs
    PRE_BUILD_COMMAND: |
      module load unstable boost hpe-mpi
    EXTRA_MODULES:
      unstable:gcc
  artifacts:
    paths:
      - docs/_build/
  script:
    - git submodule update --init
    - python -mtox

publish-docs:
  tags: []
  variables:
    SYS_PACKAGES: openssh-clients
    PIP_PACKAGES: docs_internal_upload
  script:
    - docs-internal-upload --docs-path docs/_build
  rules:
    - if: $CI_COMMIT_TAG
    - when: manual
      allow_failure: true
